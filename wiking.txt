CREATE TABLE postac (id_postaci int NOT NULL PRIMARY KEY AUTO_INCREMENT, nazwa varchar(40), rodzaj ENUM('wiking', 'ptak', 'kobieta'), data_ur DATE, wiek int unsigned);


 INSERT INTO postac VALUES (1, "Bjorn", "wiking", "1503-03-15", 35);

 INSERT INTO postac VALUES (2, "Drozda", "ptak", "15030-03-15", 5);
 INSERT INTO postac VALUES (3, "Tesciowa", "ptak", "1500-03-15", 85);
UPDATE postac SET wiek=88 WHERE id_postaci=3;
 CREATE TABLE walizka (id_walizki int NOT NULL PRIMARY KEY AUTO_INCREMENT, pojemnosc int unsigned, kolor ENUM('rozowy', 'czerwony', 'teczowy', 'zolty'), id_wlasciciela int ,FOREIGN KEY(id_wlasciciela) REFERENCES postac(id_postaci)
ON DELETE CASCADE ON UPDATE CASCADE);
ALTER TABLE walizka ALTER kolor SET DEFAULT "rozowy";
INSERT INTO walizka VALUES (1, 3, "czerwony", 1);
 INSERT INTO walizka VALUES (3, 15, "teczowy", 3);
 CREATE TABLE izba (adres_budynku int NOT NULL, nazwa_izby varchar(20) NOT NULL,PRIMARY KEY(adres_budynku, nazwa_izby),  metraz int unsigned, wlasciciel int, FOREIGN KEY(wlasciciel) REFERENCES postac(id_postaci) ON DELETE SET NULL)
;
ALTER TABLE izba  ADD kolor_izby varchar(20);
 ALTER TABLE izba ALTER kolor_izby SET DEFAULT "czarny";
 CREATE TABLE przetwory(id_przetworu int NOT NULL PRIMARY KEY, rok_produkcji YEAR, id_wykonawcy int, FOREIGN KEY(id_wykonawcy) REFERENCES postac(id_postaci), zawartosc varchar(30), dodatek varchar(30), id_konsumenta int, FOREIGN KEY(id_konsumenta) REFERENCES postac(id_postaci));
 ALTER TABLE przetwory ALTER rok_produkcji SET DEFAULT 1954;
ALTER TABLE przetwory ALTER dodatek SET DEFAULT "papryczka chilli";
 INSERT INTO przetwory VALUES (1, 1994, 3, "bigos", "papryczka chilli", 1);
INSERT INTO postac(id_postaci) VALUES (4);
INSERT INTO postac(id_postaci) VALUES (5);
 INSERT INTO postac(id_postaci) VALUES (6);
 INSERT INTO postac(id_postaci) VALUES (7);
 INSERT INTO postac(id_postaci) VALUES (8);
CREATE TABLE statek (nazwa_statku int NOT NULL PRIMARY KEY, rodzaj_statku ENUM(''), data_wodowania DATE, max_ladownosc int unsigned);
 INSERT INTO statek(nazwa_statku) VALUES('1');
INSERT INTO statek(nazwa_statku) VALUES(2);
 ALTER TABLE postac ADD funkcja varchar(30);
 UPDATE postac SET funkcja="kapitan" WHERE nazwa="Bjorn";
 ALTER TABLE postac ADD statek int;
ALTER TABLE postac ADD FOREIGN KEY(statek) REFERENCES statek(nazwa_statku);
UPDATE postac SET statek=1 WHERE rodzaj="wiking";
UPDATE postac SET statek=2 WHERE rodzaj="ptak";
DROP TABLE izba;


LEKCJA 2

DELETE FROM postac WHERE id_postaci=4;
DELETE FROM postac WHERE id_postaci=5;
DELETE FROM postac WHERE id_postaci=6;
ALTER TABLE lipnickij.walizka DROP FOREIGN KEY walizka_ibfk_1;
ALTER TABLE lipnickij.przetwory DROP FOREIGN KEY przetwory_ibfk_1;
ALTER TABLE lipnickij.przetwory DROP FOREIGN KEY przetwory_ibfk_2;
ALTER TABLE postac MODIFY id_postaci int NOT NULL;
ALTER TABLE postac DROP PRIMARY KEY;
ALTER TABLE postac MODIFY pesel varchar(11) NOT NULL PRIMARY KEY; ;
ALTER TABLE postac MODIFY rodzaj ENUM('wiking', 'ptak', 'tesciowa', 'syrena');
INSERT INTO postac VALUES(4, "Gertruda Nieszczera", "syrena",15030319, 45, NULL, NULL, 12345678901);
UPDATE postac SET statek=1 WHERE nazwa="%a%";
UPDATE statek SET max_ladownosc=max_ladownosc*0.7 WHERE data_wodowania=data_wodowania>1900 && data_wodowania<20010101;
SELECT * FROM postac WHERE wiek<1000;
INSERT INTO postac VALUES(5, "Loko", "syrena", 14030311, 154, NULL, NULL, 14329505410);
CREATE TABLE Marynarz LIKE postac;
INSERT INTO Marynarz SELECT * FROM postac WHERE statek IS NOT NULL;
UPDATE postac SET statek=NULL;
DELETE FROM postac WHERE id_postaci=7;
DELETE FROM statek WHERE nazwa_statku=1;
DELETE FROM statek WHERE nazwa_statku=2;
 ALTER TABLE postac DROP FOREIGN KEY postac_ibfk_1;
 DROP TABLE statek;
CREATE TABLE zwierz(id int NOT NULL PRIMARY KEY AUTO_INCREMENT, nazwa varchar(40), wiek int);
INSERT INTO zwierz VALUES (1, "Drozda", 5);

LEKCJA 3 
CREATE TABLE kreatura AS SELECT * FROM wikingowie.kreatura;
CREATE TABLE zasob AS SELECT * FROM wikingowie.zasob;
CREATE TABLE ekwipunek AS SELECT * FROM wikingowie.ekwipunek;
SELECT * FROM zasob;
SELECT * FROM zasob WHERE rodzaj IN("jedzenie");
SELECT 'idZasobu', 'ilosc' FROM kreatura WHERE idKreatury IN(1, 3, 5);
?????????? ^^^
SELECT * FROM kreatura WHERE rodzaj NOT IN("wiedzma");
SELECT * FROM kreatura WHERE rodzaj NOT IN("wiedzma") AND udzwig>50;
SELECT * FROM zasob WHERE waga>1 AND waga<6;
SELECT * FROM kreatura WHERE nazwa LIKE "%or%";
 SELECT * FROM kreatura WHERE nazwa LIKE "%or%" AND udzwig>29 && udzwig<71;
SELECT * FROM zasob WHERE monthname(dataPozyskania)="August" OR monthname(dataPozyskania)="july";
SELECT * FROM zasob ORDER BY(waga);
SELECT * FROM kreatura ORDER BY dataUr LIMIT 5;
SELECT rodzaj FROM zasob GROUP BY rodzaj HAVING COUNT(rodzaj)=1;
SELECT CONCAT(nazwa, " - ", rodzaj) FROM kreatura WHERE rodzaj LIKE "wi%";
SELECT *, CONCAT(ilosc*waga) as WAGCAL FROM zasob WHERE dataPozyskania BETWEEN CAST('2000-01-01' AS DATE) AND CAST('2007-12-30' AS DATE);
SELECT *, CONCAT(ilosc*waga*0.7) AS NETTOWAG, CONCAT(ilosc*waga*0.3) AS ODPADKI FROM zasob;
SELECT * FROM zasob WHERE rodzaj IS NULL;
SELECT DISTINCT nazwa FROM zasob WHERE nazwa LIKE "Ba%" OR nazwa LIKE "%os" ORDER BY nazwa asc;

LEKCJA 4
SELECT CONCAT(SUM(waga)/COUNT(waga)) FROM kreatura WHERE rodzaj="wiking";
SELECT rodzaj,CONCAT(SUM(waga)/COUNT(waga)), CONCAT(COUNT(rodzaj)) FROM kreatura GROUP BY rodzaj;
SELECT rodzaj, SUM(TIMESTAMPDIFF(YEAR,dataUr,CURDATE()))/COUNT(rodzaj) AS wiek FROM kreatura GROUP BY rodzaj;
SELECT rodzaj, SUM(waga) FROM zasob GROUP BY rodzaj;
SELECT nazwa, SUM(waga)/COUNT(ilosc) FROM zasob WHERE ilosc>3 AND waga*ilosc>10 GROUP BY nazwa;
?^
SELECT COUNT(DISTINCT nazwa), rodzaj FROM zasob WHERE ilosc>1 GROUP BY rodzaj;
SELECT kreatura.nazwa, SUM(ekwipunek.ilosc) AS ilosc FROM kreatura INNER JOIN ekwipunek ON kreatura.idKreatury=ekwipunek.idKreatury GROUP BY nazwa;
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura JOIN ekwipunek ON ekwipunek.idKreatury = kreatura.idKreatury JOIN zasob ON zasob.idZasobu = ekwipunek.idZasobu;
SELECT kreatura.nazwa FROM kreatura LEFT JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury WHERE ekwipunek.idKreatury IS NULL;
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura JOIN ekwipunek ON ekwipunek.idKreatury = kreatura.idKreatury JOIN zasob ON zasob.idZasobu = ekwipunek.idZasobu WHERE kreatura.rodzaj="wiking" AND (kreatura.dataUr BETWEEN '1670-01-01' AND '1680-01-01') GROUP BY kreatura.nazwa;
SELECT DISTINCT kreatura.nazwa FROM kreatura JOIN ekwipunek ON ekwipunek.idKreatury = kreatura.idKreatury JOIN zasob ON zasob.idZasobu = ekwipunek.idZasobu WHERE zasob.rodzaj="jedzenie" ORDER BY kreatura.dataUr desc LIMIT 5;
SELECT CONCAT(kreatura.nazwa, " - ", kreatura.idKreatury+5) AS NAZWY FROM kreatura;
ZAD5
SELECT kreatura.rodzaj, AVG(zasob.waga) FROM kreatura JOIN ekwipunek ON kreatura.idKreatury=ekwipunek.idKreatury JOIN zasob ON ekwipunek.idKreatury=zasob.idZasobu WHERE kreatura.rodzaj!="waz" AND kreatura.rodzaj!="malpa" AND ekwipunek.ilosc<30 GROUP BY kreatura.rodzaj;

2.Dla każdego rodzaju kreatury wyświetlić nazwę, 
datę urodzenia i rodzaj najmłodszej i najstarszej kreatury.

LEKCJA 5

ZAD 1
CREATE TABLE kreatura AS SELECT * FROM wikingowie.kreatura;
CREATE TABLE uczestnicy AS SELECT * FROM wikingowie.uczestnicy;
CREATE TABLE etapy_wyprawy AS SELECT * FROM wikingowie.etapy_wyprawy;
CREATE TABLE sektor AS SELECT * FROM wikingowie.sektor;
CREATE TABLE wyprawa AS SELECT * FROM wikingowie.wyprawa;
SELECT kreatura.nazwa FROM kreatura JOIN uczestnicy ON kreatura.idKreatury=uczestnicy.id_uczestnika;
SELECT wyprawa.nazwa, SUM(ekwipunek.ilosc) AS EKW_ZEB FROM wyprawa JOIN uczestnicy ON wyprawa.id_wyprawy=uczestnicy.id_wyprawy JOIN ekwipunek ON uczestnicy.id_uczestnika=ekwipunek.idKreatury;
ZAD 2
select wyprawa.nazwa, COUNT(uczestnicy.id_uczestnika) AS ILOSC_UCZESTNIKOW, GROUP_CONCAT(kreatura.nazwa) AS NAZWY_UCZESTNIKOW from wyprawa JOIN uczestnicy ON uczestnicy.id_wyprawy=wyprawa.id_wyprawy JOIN kreatura ON kreatura.idKreatury=uczestnicy.id_uczestnika GROUP BY wyprawa.nazwa;
select idWyprawy, GROUP_CONCAT(sektor.nazwa), kreatura.nazwa from etapy_wyprawy JOIN sektor ON sektor.id_sektora=etapy_wyprawy.sektor JOIN wyprawa ON wyprawa.id_wyprawy=etapy_wyprawy.idWyprawy JOIN kreatura ON kreatura.idKreatury=wyprawa.kierownik GROUP BY etapy_wyprawy.idWyprawy ORDER BY wyprawa.data_rozpoczecia AND etapy_wyprawy.kolejnosc;
ZAD 3
select sektor.nazwa, COUNT(IFNULL(etapy_wyprawy.sektor, 0)) AS ilosc_odwiedzin from sektor JOIN etapy_wyprawy ON etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektor.nazwa;
^NIE WYSWIETLA ZERA
select kreatura.nazwa, IF(COUNT(uczestnicy.id_wyprawy)>0, 'BRAL UDZIAL', 'NIE BRAL UDZIALU') from kreatura JOIN uczestnicy ON uczestnicy.id_uczestnika=kreatura.idKreatury GROUP BY kreatura.nazwa;
ZAD 4
select wyprawa.nazwa, CHAR_LENGTH(etapy_wyprawy.dziennik) FROM wyprawa JOIN etapy_wyprawy ON etapy_wyprawy.idWyprawy=wyprawa.id_wyprawy GROUP BY wyprawa.nazwa;
^?
select wyprawa.nazwa, CONCAT(SUM(ekwipunek.idZasobu*ekwipunek.ilosc)/COUNT(uczestnicy.id_uczestnika)) AS srednia_waga from wyprawa JOIN uczestnicy ON uczestnicy.id_wyprawy=wyprawa.id_wyprawy JOIN ekwipunek ON ekwipunek.idKreatury=uczestnicy.id_uczestnika GROUP BY wyprawa.nazwa;
ZAD 5
select kreatura.nazwa, DATEDIFF(wyprawa.data_rozpoczecia, kreatura.dataUr) from kreatura JOIN uczestnicy ON uczestnicy.id_uczestnika=kreatura.idKreatury JOIN wyprawa ON wyprawa.id_wyprawy=uczestnicy.id_wyprawy JOIN etapy_wyprawy ON etapy_wyprawy.idWyprawy=wyprawa.id_wyprawy WHERE etapy_wyprawy.sektor=7 group by kreatura.nazwa;

LEKCJA 6
ZAD 1
create trigger zadpie before insert on kreatura for each row begin if(new.waga>0) then set new.waga=new.waga; end if; end//
ZAD 2
create table archiwum_wypraw (id_wyprawy int PRIMARY KEY, nazwa varchar(40), data_rozpoczecia DATE, data_zakonczenia DATE, kierownik varchar(20));
 create trigger zaddru after delete on wyprawa for each row begin insert into archiwum_wypraw(kierownik) values(kreatura.nazwa); end //
ZAD 3
create procedure eliksir_sily(in idKreatury int) begin update kreatura set udzwig=udzwig*1.2; end//

create function wielkie_liter(tekst varchar(30)) returns varchar(30) deterministic return UPPER(tekst); //

ZAD 4
create table system_alarmowy(id_alarmu int NOT NULL, wiadomosc varchar(40));














 












